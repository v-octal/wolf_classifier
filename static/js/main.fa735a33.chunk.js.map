{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["memoized","memoizedClassList","baseURL","updateFn","fetch","then","resp","json","classes","join","catch","App","useState","currentURL","setCurrentURL","currentInput","setCurrentInput","predictions","setPredictions","setClassMessage","serverBaseURL","className","src","style","marginBottom","maxHeight","alt","htmlFor","type","id","value","onChange","e","target","onClick","method","headers","body","JSON","stringify","url","results","error","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2KAKMA,G,kBAAW,IAEXC,EAAoB,SAACC,EAASC,GAC9BH,EAASE,KAGbF,EAASE,IAAW,EACpBE,MAAM,GAAD,OAAIF,EAAJ,oBACFG,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACJL,EAAS,iBAAD,OAAkBK,EAAQC,KAAK,WAExCC,OAAM,kBAAMP,EAAS,sDAqFXQ,MAlFf,WAAgB,IAAD,EACuBC,mBAClC,yHAFW,mBACNC,EADM,KACMC,EADN,OAI2BF,mBAAS,IAJpC,mBAING,EAJM,KAIQC,EAJR,OAKyBJ,mBAAS,IALlC,mBAKNK,EALM,KAKOC,EALP,OAM2BN,mBACtC,gCAPW,mBAMQO,GANR,aAS6BP,mBACxC,8CAVW,mBASNQ,EATM,KAsCb,OAtCa,KAabnB,EAAkBmB,EAAeD,GA0B/B,yBAAKE,UAAU,OACb,4BAAQA,UAAU,cAChB,+CACA,6BACA,yBACEC,IAAKT,EACLU,MAAO,CAAEC,aAAc,OAAQC,UAAW,SAC1CC,IAAI,SAGN,yBAAKL,UAAU,aACb,yBAAKA,UAAU,OACb,0BAAMA,UAAU,aACd,yBAAKA,UAAU,cACb,2BAAOM,QAAQ,YAAf,kEAGA,2BACEC,KAAK,OACLP,UAAU,eACVQ,GAAG,WACHC,MAAOf,EACPgB,SA9BC,SAAAC,GACfhB,EAAgBgB,EAAEC,OAAOH,WAgCf,4BACEF,KAAK,SACLP,UAAU,kBACVa,QApDE,WACdpB,EAAcC,GACdX,MAAM,GAAD,OAAIgB,EAAJ,iBAAkC,CACrCe,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,IAAKzB,MAGNV,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAoC,GAAO,OAAIvB,EAAeoB,KAAKC,UAAUE,EAAQxB,iBACtDP,OAAM,SAAAgC,GAAK,OAAIxB,EAAe,6BAAD,OAA8BwB,SAoCpD,cASJ,yBAAKrB,UAAU,OACb,yBAAKA,UAAU,aAAaJ,QClFpB0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,MAAK,SAAAkD,GACjCA,EAAaC,iB","file":"static/js/main.fa735a33.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"whatwg-fetch\";\nimport \"./App.css\";\n\nconst memoized = {};\n\nconst memoizedClassList = (baseURL, updateFn) => {\n  if (memoized[baseURL]) {\n    return;\n  }\n  memoized[baseURL] = true;\n  fetch(`${baseURL}/api/class_list`)\n    .then(resp => resp.json())\n    .then(classes => {\n      updateFn(`I can detect: ${classes.join(\", \")}`);\n    })\n    .catch(() => updateFn(\"API call to get classes failed...not great...\"));\n};\n\nfunction App() {\n  const [currentURL, setCurrentURL] = useState(\n    \"https://vignette.wikia.nocookie.net/gameofthrones/images/9/94/804_Ghost_Profile.png/revision/latest?cb=20190506030424\"\n  );\n  const [currentInput, setCurrentInput] = useState(\"\");\n  const [predictions, setPredictions] = useState(\"\");\n  const [classMessage, setClassMessage] = useState(\n    \"Getting a list of classes...\"\n  );\n  const [serverBaseURL, setServerBaseURL] = useState(\n    \"https://immense-waters-40588.herokuapp.com\"\n  );\n\n  memoizedClassList(serverBaseURL, setClassMessage);\n\n  const onClick = () => {\n    setCurrentURL(currentInput);\n    fetch(`${serverBaseURL}/api/classify`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        url: currentInput\n      })\n    })\n      .then(resp => resp.json())\n      .then(results => setPredictions(JSON.stringify(results.predictions)))\n      .catch(error => setPredictions(`Oops, an error occured: : ${error}`));\n  };\n\n  const onChange = e => {\n    setCurrentInput(e.target.value);\n  };\n\n  const onBlur = e => {\n    setServerBaseURL(e.target.value);\n  };\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Wolf Classifier</h1>\n        <br></br>\n        <img\n          src={currentURL}\n          style={{ marginBottom: \"20px\", maxHeight: \"400px\" }}\n          alt=\"Wolf\"\n        ></img>\n\n        <div className=\"container\">\n          <div className=\"row\">\n            <form className=\"col-sm-12\">\n              <div className=\"form-group\">\n                <label htmlFor=\"urlInput\">\n                  Enter the URL of an image of wolf that you'd like to classify:\n                </label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"urlInput\"\n                  value={currentInput}\n                  onChange={onChange}\n                ></input>\n              </div>\n              <button\n                type=\"button\"\n                className=\"btn btn-primary\"\n                onClick={onClick}\n              >\n                Predict!\n              </button>\n            </form>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-sm-12\">{predictions}</div>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}